package main

import "fmt"

func PointersExample() {
	// Criando uma vari√°vel normal
	number := 10
	fmt.Println("=== Pointers in Go ===")
	fmt.Println("Valor original:", number)

	// Criando um ponteiro para armazenar o endere√ßo da vari√°vel `number`
	var ptr *int = &number
	fmt.Println("Endere√ßo da vari√°vel (ponteiro):", ptr) // Mostra o endere√ßo de mem√≥ria
	fmt.Println("Valor acessado pelo ponteiro:", *ptr)   // Acessa o valor armazenado no endere√ßo

	// Modificando o valor atrav√©s do ponteiro
	*ptr = 20
	fmt.Println("Novo valor da vari√°vel ap√≥s altera√ß√£o via ponteiro:", number) // Agora `number` vale 20

	// Criando um ponteiro n√£o inicializado (valor padr√£o: nil)
	var uninitializedPointer *int
	fmt.Println("Ponteiro n√£o inicializado:", uninitializedPointer) // nil (n√£o aponta para nada)

	// Aloca√ß√£o de mem√≥ria usando `new`
	allocatedPointer := new(int)                                 // Aloca mem√≥ria para um inteiro e retorna um ponteiro para ele
	*allocatedPointer = 50                                       // Define o valor dentro da mem√≥ria alocada
	fmt.Println("Valor do ponteiro alocado:", *allocatedPointer) // 50

	// Demonstrando a diferen√ßa entre vari√°vel normal e ponteiro
	numA := 5
	numB := numA    // Aqui estamos copiando o valor, n√£o a refer√™ncia
	numPtr := &numA // Aqui estamos copiando o endere√ßo, ent√£o ele referencia `numA`

	fmt.Println("numA:", numA, "| numB (c√≥pia):", numB) // Ambos come√ßam com 5
	*numPtr = 100
	fmt.Println("numA ap√≥s ponteiro modificar:", numA)  // Agora `numA` foi alterado para 100
	fmt.Println("numB (c√≥pia) continua o mesmo:", numB) // `numB` ainda √© 5, pois foi uma c√≥pia

	// Criando uma fun√ß√£o para modificar valores usando ponteiros
	modifyValue(&numA)
	fmt.Println("numA ap√≥s fun√ß√£o modificar via ponteiro:", numA) // Agora vale 200
}

// Fun√ß√£o que recebe um ponteiro e modifica o valor original
func modifyValue(value *int) {
	*value = 200 // Modifica o valor no endere√ßo apontado
}

//üî• Explica√ß√£o Detalhada
//üîπ O que √© um ponteiro?
//Um ponteiro √© uma vari√°vel que armazena o endere√ßo de mem√≥ria de outra vari√°vel.
//Em Go, ponteiros s√£o declarados com *Tipo, por exemplo: var ptr *int.
//üîπ O que significa & e *?
//&vari√°vel ‚Üí Obt√©m o endere√ßo de mem√≥ria da vari√°vel.
//*ponteiro ‚Üí Acessa o valor armazenado no endere√ßo do ponteiro.
//üîπ O que acontece ao modificar um valor via ponteiro?
//go
//Copiar
//Editar
//number := 10
//ptr := &number   // ptr agora armazena o endere√ßo de number
//*ptr = 20        // Modifica diretamente a vari√°vel number
//fmt.Println(number) // Sa√≠da: 20
//O valor da vari√°vel number foi alterado, porque ptr aponta diretamente para ela.
//
//üîπ O que acontece ao copiar uma vari√°vel sem ponteiro?
//go
//Copiar
//Editar
//numA := 5
//numB := numA // Apenas copia o valor, sem refer√™ncia
//numB = 10
//fmt.Println(numA) // Continua sendo 5
//Como numB foi apenas uma c√≥pia, modificar numB n√£o afeta numA.
//
//üîπ Por que new(int) √© √∫til?
//go
//Copiar
//Editar
//ptr := new(int) // Aloca mem√≥ria para um inteiro e retorna um ponteiro para ele
//*ptr = 50
//fmt.Println(*ptr) // Sa√≠da: 50
//Isso √© √∫til quando queremos criar vari√°veis sem precisar declarar diretamente uma inst√¢ncia.
//
//üîπ Modificando valores dentro de fun√ß√µes
//Quando passamos uma vari√°vel para uma fun√ß√£o sem ponteiro, ela √© copiada.
//Quando passamos um ponteiro, a fun√ß√£o pode modificar o valor original.
//go
//Copiar
//Editar
//func modifyValue(value *int) {
//	*value = 200 // Modifica o valor original na mem√≥ria
//}
